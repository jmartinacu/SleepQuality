
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  email                  String @unique
  name                   String
  password               String
  gender                 Gender
  birth                  DateTime
  height                 Float
  weight                 Float
  chronicDisorders       String
  BMI                    Float
  role                   Role @default(USER)
  verificationCode       String @default(uuid())
  passwordResetCode      Int?
  doctorCode             Int?
  verified               Boolean @default(false)
  session                Session?
  profilePicture         String?
  questionnairesToDo     String[]
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  answers                Answer[] 
  questionnaireAlgorithm QuestionnaireAlgorithm[]
  doctor                 Doctor? @relation(fields: [doctorId], references: [id]) 
  doctorId               String? @unique @db.ObjectId
}

model Doctor {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  email            String @unique
  name             String
  password         String
  gender           Gender
  birth            DateTime
  height           Float
  weight           Float
  verified         Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  session          Session?
  users            User[]
}

model Session {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  valid     Boolean @default(true)
  updatedAt DateTime @updatedAt
  user      User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade) 
  userId    String? @unique @db.ObjectId
  doctor    Doctor? @relation(fields: [doctorId], references: [id], onUpdate: Cascade, onDelete: Cascade) 
  doctorId  String? @unique @db.ObjectId
}

model Questionnaire {
  id                     String @id @default(auto()) @map("_id") @db.ObjectId
  name                   String @unique
  questions              Json
  additionalInformation  Json[]
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  answers                Answer[]
  questionnaireAlgorithm QuestionnaireAlgorithm[]
}

model QuestionnaireAlgorithm {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  stopBangWarning                String?
  stopBangRisk                   Int?
  epworthSleepinessScaleRisk     Int?
  epworthSleepinessScaleWarning  String?
  pittsburghSleepQualityIndex    Int?
  perceivedStressQuestionnaire   Int?
  athensInsomniaScale            Int?  
  internationalRestlessLegsScale Int?
  insomniaSeverityIndexWarning   String?
  insomniaSeverityIndexRisk      Int?
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  questionnaireId                String  @db.ObjectId
  quesionnaire                   Questionnaire @relation(fields: [questionnaireId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId                         String @db.ObjectId
  user                           User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Answer {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  answers         Json
  createdAt       DateTime @default(now())
  userId          String @db.ObjectId
  user            User @relation(fields: [userId], references: [id])
  questionnaireId String @db.ObjectId
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
}

enum Gender {
  MASCULINE
  FEMININE
  NEUTER
}


enum Role {
  ADMIN
  USER
}
